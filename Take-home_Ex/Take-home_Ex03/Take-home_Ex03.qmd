---
title: "Take-home_Ex03"
author: "Zou Jiaxun"
date: "Jun 7, 2024"
data-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
format:
  html:
    code-fold: true
    code-summary: "Click to view code"
---

# Vast Challenge 2024 Mini-Challenge 3

In this challenge, I will attempt to do the following:

-   

    1.  Use visual analytics to identify the relationship of entities

-   

    2.  Based on the visualization on Network, infer a network ownership or influence

## 1 Getting Start

### 1.1 Package Preparation

```{r}
pacman::p_load(tidyverse, readtext, skimr, knitr,
               quanteda, tidytext, jsonlite, dplyr,
               tidyr, tidygraph, ggraph, igraph, lubridate,
               visNetwork, ggplot2, gganimate, gridExtra)
```

## 2 Data Wangling

### 2.1 Data Import

```{r}
mc3_data <- fromJSON("data/MC3/mc3 1.json")
class(mc3_data)
```

### 2.2 Data Check

::: panel-tabset
## Edges

```{r}
mc3_edges <- as_tibble(mc3_data$link)
glimpse(mc3_edges)
```

## Nodes

```{r}
mc3_nodes <- as_tibble(mc3_data$nodes)
glimpse(mc3_nodes)
```
:::

### 2.3 Data Filter

::: panel-tabset
## Edges

```{r}
# Assume the end_data which is NA be filled by 2035-12-12
mc3_edges_add <- mc3_edges %>%
  mutate(
    start_date = as.Date(start_date, format = "%Y-%m-%d"),
    end_date = as.Date(ifelse(is.na(end_date), "2035-12-12", as.character(end_date)), format = "%Y-%m-%d")
  ) %>%
  filter(!is.na(start_date))

# Display the modified dataset
glimpse(mc3_edges_add)
```

```{r}
mc3_edges_filt <- mc3_edges_add %>% select(type, source, target, start_date, end_date)
glimpse(mc3_edges_filt)
```

## Nodes

```{r}
mc3_nodes_filt <- mc3_nodes %>% select(type, id, country)
glimpse(mc3_nodes_filt)
```
:::

### 2.4 Edges & Nodes Explore

::: panel-tabset
## Edges

```{r}
skim(mc3_edges_filt)
```

```{r}
p1 <- ggplot(data = mc3_edges_filt, aes(x = type, fill = type)) +
  geom_bar() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
p1
```

## Nodes

```{r}
skim(mc3_nodes_filt)
```

```{r}
p2 <- ggplot(data = mc3_nodes_filt, aes(x = type, fill = type)) +
  geom_bar() + theme(axis.text.x = element_text(angle = 60, hjust = 1))
p2 
```
:::

::: callout-tip
According to the VAST2024 - MC3 Data Description, the person node include Entity.Person and Entity.Person.CEO, the other were included in the Company.
:::

## 3 MC3 Task

::: callout-tip
Based on this plot, the edge date will be used, and the company name to define company; Meanwhile, the type in node will be used, source and target will be choosed to decide the "from" and "to".
:::

### 3.1 Relationship

::: panel-tabset
#### 3.1.1 Nodes

The code chunk below will be used to extract the nodes data.frame of mc3_data and save it as a tibble data.frame called mc3_nodes.

```{r}
# Clean and select columns from mc3_data$nodes
mc3_nodes_clean <- as_tibble(mc3_nodes_filt) %>%
  mutate(type = type,
         id = id) %>%
  select(id, type) %>%
  separate(type, into = c("prefix", "supertype", "subtype"), sep = "\\.", extra = "merge", fill = "right") %>%
  select(id, supertype, subtype)

kable(head(mc3_nodes_clean))
```

#### 3.1.2 Edges

The code chunk below will be used to extract the links data.frame of mc3_data and save it as a tibble data.frame called mc3_edges.

```{r}
mc3_edges_clean <- as_tibble(mc3_edges_filt) %>% 
  mutate(
    start_date = as_datetime(start_date),
    end_date = as_datetime(end_date)
    ) %>%
  group_by(source, target, type, start_date, end_date) %>%
    summarise(weights = n(), .groups = 'drop') %>%
  filter(source != target) %>%
  ungroup()
kable(head(mc3_edges_clean))
```
:::

Let's focuse on the SouthSeafood Express Corp

::: panel-tabset
### neighbour

```{r}
# Define the target node
target_node <- "SouthSeafood Express Corp"

# Filter edges related to the target node
related_edges <- mc3_edges_clean %>%
  filter(source == target_node | target == target_node) %>%
  rename(from = source, to = target)

# Extract the related nodes
related_nodes <- mc3_nodes_clean %>%
  filter(id %in% c(related_edges$from, related_edges$to))


# Create the visNetwork plot
q1 <- visNetwork(related_nodes, related_edges) %>%
  visPhysics(solver = "forceAtlas2Based",
             forceAtlas2Based = list(gravitationalConstant = -100)) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visGroups(groupname = "Organization", color = "pink") %>%
  visGroups(groupname = "Person", color = "lightgreen") %>%
  visLegend() %>%
  visEdges(arrows = "to") %>%
  visOptions(
    highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
    nodesIdSelection = TRUE,
    selectedBy = "subtype",
    collapse = TRUE
  ) %>%
  visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%
  visEvents(selectNode = "function(properties) {
    var selectedNodeId = properties.nodes[0];
    this.body.data.nodes.update({id: selectedNodeId, color: {background: 'red', border: 'black'}});
  }")
q1
```

### Sub-direct

```{r}
# Define the target node
target_node <- "SouthSeafood Express Corp"

# Filter edges related to the target node
initial_edges <- mc3_edges_clean %>%
  filter(source == target_node | target == target_node) %>%
  rename(from = source, to = target)

connected_nodes <- mc3_nodes_clean %>%
  filter(id %in% c(initial_edges$from, initial_edges$to))

expanded_edges <- mc3_edges_clean %>%
  filter(source %in% connected_nodes$id | target %in% connected_nodes$id) %>%
  rename(from = source, to = target)

# Extract source and target nodes from expanded edges
expanded_nodes_source <- expanded_edges %>%
  distinct(from) %>%
  rename(id = from)

expanded_nodes_target <- expanded_edges %>%
  distinct(to) %>%
  rename(id = to)

# Combine and deduplicate nodes
expanded_nodes_combined <- bind_rows(expanded_nodes_source, expanded_nodes_target) %>%
  distinct(id) %>%
  left_join(mc3_nodes_clean, by = "id")

# Assign group based on supertype
expanded_nodes_combined$group <- ifelse(expanded_nodes_combined$supertype == "Organization", "Organization", "Person")


# Create the visNetwork plot
q2 <- visNetwork(expanded_nodes_combined, expanded_edges) %>%
  visPhysics(solver = "forceAtlas2Based",
             forceAtlas2Based = list(gravitationalConstant = -100)) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visGroups(groupname = "Organization", color = "pink") %>%
  visGroups(groupname = "Person", color = "lightgreen") %>%
  visLegend() %>%
  visEdges(arrows = "to") %>%
  visOptions(
    highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
    nodesIdSelection = TRUE,
    selectedBy = "subtype",
    collapse = TRUE
  ) %>%
  visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%
  visEvents(selectNode = "function(properties) {
    var selectedNodeId = properties.nodes[0];
    this.body.data.nodes.update({id: selectedNodeId, color: {background: 'red', border: 'black'}});
  }")
q2
```

### Ownership

```{r}
# Identify nodes directly connected to the target node
connected_nodes <- mc3_nodes_clean %>%
  filter(id %in% c(initial_edges$from, initial_edges$to))

expanded_edges <- initial_edges
expanded_nodes <- connected_nodes

repeat {
  # Identify all nodes connected to the current set of nodes
  new_edges <- mc3_edges_clean %>%
    filter(source %in% expanded_nodes$id | target %in% expanded_nodes$id) %>%
    rename(from = source, to = target)
  
  # Identify new nodes from the newly found edges
  new_nodes <- mc3_nodes_clean %>%
    filter(id %in% c(new_edges$from, new_edges$to)) %>%
    filter(!id %in% expanded_nodes$id)
  
  # Add new edges and nodes to the expanded set
  expanded_edges <- bind_rows(expanded_edges, new_edges) %>%
    distinct()
  expanded_nodes <- bind_rows(expanded_nodes, new_nodes) %>%
    distinct()
  
  # Break the loop if there are no new nodes to add or all new nodes are of type "Person"
  if (nrow(new_nodes) == 0 || all(new_nodes$supertype == "Person")) {
    break
  }
}

```

```{r}
# Extract source and target nodes from expanded edges
expanded_nodes_source <- expanded_edges %>%
  distinct(from) %>%
  rename(id = from)

expanded_nodes_target <- expanded_edges %>%
  distinct(to) %>%
  rename(id = to)

# Combine and deduplicate nodes
expanded_nodes_combined <- bind_rows(expanded_nodes_source, expanded_nodes_target) %>%
  distinct(id) %>%
  left_join(mc3_nodes_clean, by = "id")

# Assign group based on supertype
expanded_nodes_combined$group <- ifelse(expanded_nodes_combined$supertype == "Organization", "Organization", "Person")

```

```{r}
# Create the visNetwork plot
q3 <- visNetwork(expanded_nodes_combined, expanded_edges) %>%
  visPhysics(solver = "forceAtlas2Based",
             forceAtlas2Based = list(gravitationalConstant = -100)) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visGroups(groupname = "Organization", color = "pink") %>%
  visGroups(groupname = "Person", color = "lightgreen") %>%
  visLegend() %>%
  visEdges(arrows = "to") %>%
  visOptions(
    highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
    nodesIdSelection = TRUE,
    selectedBy = "subtype",
    collapse = TRUE
  ) %>%
  visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%
  visEvents(selectNode = "function(properties) {
    var selectedNodeId = properties.nodes[0];
    this.body.data.nodes.update({id: selectedNodeId, color: {background: 'red', border: 'black'}});
  }")

q3
```
:::

### 3.2 Visualising network graph

First, create a graph object using tbl_graph() function. Then calculate betweenness and closeness centrality scores.

```{r}
mc3_graph <- tbl_graph(nodes = mc3_nodes_clean,
                       edges = mc3_edges_clean,
                       directed = FALSE) %>%
  mutate(betweenness_centrality = centrality_betweenness(),
         closeness_centrality = centrality_closeness())
```

We will filter nodes with high betweeness centrality scores (\>8,000,000) and visualise them to see the relationships that they have.

```{r}
set.seed(1234)
mc3_graph %>%
  filter(betweenness_centrality > 8000000) %>%
ggraph(layout = "fr") +
  geom_edge_link(aes(alpha=0.5)) +
  geom_node_point(aes(
    size = betweenness_centrality,
    color = supertype,
    alpha = 0.3)) +
  geom_node_label(aes(label = id),repel=TRUE, size=2.5, alpha = 0.8) +
  scale_size_continuous(range=c(1,10)) +
  theme_graph() +
  labs(title = 'Initial network visualisation',
       subtitle = 'Entities with betweenness scores > 8,000,000')
```

Below is a dataframe showing us the top 10 entities with the highest betweenness scores.

```{r}
mc3_graph %>%  activate(nodes) %>%  as_tibble() %>% arrange(desc(betweenness_centrality)) %>% slice(1:10) %>% kable() 
```

The top 10 betweenness entities above include 3 persons and 7 companies. In the next section, we will filter entities into only organization entities. We may revisit the person entities later when we have specific targets/companies to investigate.

### 3.3 Check the Illegal event timeline

(1) before 2033-10-29
(2) between 2033-10-29 and 2035-05-25
(3) after 2035-05-25

```{r}
# Time bins
bin1 <- mc3_edges_clean %>%
  filter(as.Date(start_date) < as.Date("2033-10-29"))

bin2 <- mc3_edges_clean %>%
  filter(as.Date(start_date) >= as.Date("2033-10-29") & as.Date(start_date) <= as.Date("2035-05-25"))

bin3 <- mc3_edges_clean %>%
  filter(as.Date(start_date) > as.Date("2035-05-25"))

# Filter edges to include any that contain "SouthSeafood"
southseafood_edges_bin1 <- bin1 %>%
  filter(str_detect(source, "SouthSeafood") | str_detect(target, "SouthSeafood"))

southseafood_edges_bin2 <- bin2 %>%
  filter(str_detect(source, "SouthSeafood") | str_detect(target, "SouthSeafood"))

southseafood_edges_bin3 <- bin3 %>%
  filter(str_detect(source, "SouthSeafood") | str_detect(target, "SouthSeafood"))

glimpse(southseafood_edges_bin1)
glimpse(southseafood_edges_bin2)
glimpse(southseafood_edges_bin3)
```

We notice that, there are only 2 companies related to the SouthSeafood Express Corp, they might be shell company.

### 3.4 Exploring the VisNetwork for company influence based on timeline

#### 3.4.1 Filter nodes to include only Organizations

```{r}
# Filter nodes to include only Organizations or Persons
mc3_nodes_select <- mc3_nodes_clean %>%
  filter(grepl("Organization|Person", supertype, ignore.case = TRUE))
```

#### 3.4.2 Extract edges related to nodes

```{r}
mc3_edges_select <- mc3_edges_clean %>%
  filter(source %in% mc3_nodes_select$id | target %in% mc3_nodes_select$id) %>%
  distinct() %>%
  rename(from = source,
         to = target)
```

#### 3.4.3 Extract edges with high connection

```{r}
mc3_edges_select_high <- mc3_edges_select %>%
  group_by(from) %>%
  mutate(count = n()) %>%
  filter(count >= 92) %>%
  ungroup()
```

#### 3.4.4 Distinct source and target

```{r}
mc3_nodes_source <- mc3_edges_select_high %>%
  distinct(from) %>%
  rename(id = from)

mc3_nodes_target <- mc3_edges_select_high %>%
  distinct(to) %>%
  rename(id = to)

```

#### 3.4.5 Build visNetwork

```{r}
# Combine and deduplicate nodes
mc3_nodes_combined <- bind_rows(mc3_nodes_source, mc3_nodes_target) %>%
  distinct(id) %>%
  left_join(mc3_nodes_clean, by = "id")

# Assign group based on supertype
mc3_nodes_combined$group <- ifelse(mc3_nodes_combined$supertype == "Organization", "Organization", "Person")

# Visualize with visNetwork
V1 <- visNetwork(mc3_nodes_combined, mc3_edges_select_high) %>%
  visPhysics(solver = "forceAtlas2Based",
             forceAtlas2Based = list(gravitationalConstant = -100)) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visGroups(groupname = "Organization", color = "yellow") %>%
  visGroups(groupname = "Person", color = "grey") %>%
  visLegend() %>%
  visEdges(arrows = "to") %>%
  visOptions(
    highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
    nodesIdSelection = TRUE,
    selectedBy = "subtype",
    collapse = TRUE
  ) %>%
  visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%
  visEvents(selectNode = "function(properties) {
    var selectedNodeId = properties.nodes[0];
    this.body.data.nodes.update({id: selectedNodeId, color: {background: 'red', border: 'black'}});
  }")
V1
```

#### 3.4.6 Compare timeline

Since the SouthSeafood Express Corp connect first event from AguaLeska Transit N.V. in 2033-10-29, and turn to connect Tainamarine Fishing Co in 2035-05-25

::: panel-tabset
## before 2033-10-29

```{r}

# Filter edges based on date criteria
mc3_edges_filtered_dates_1 <- mc3_edges_select_high %>%
  filter(start_date < as_datetime("2033-10-29") & end_date > as_datetime("2033-10-29"))
```

```{r}
# Visualize with visNetwork
V2 <- visNetwork(mc3_nodes_combined, mc3_edges_filtered_dates_1) %>%
  visPhysics(solver = "forceAtlas2Based",
             forceAtlas2Based = list(gravitationalConstant = -100)) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visGroups(groupname = "Organization", color = "lightblue") %>%
  visGroups(groupname = "Person", color = "lightgreen") %>%
  visLegend() %>%
  visEdges(arrows = "to") %>%
  visOptions(
    highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
    nodesIdSelection = TRUE,
    selectedBy = "subtype",
    collapse = TRUE
  ) %>%
  visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%
  visEvents(selectNode = "function(properties) {
    var selectedNodeId = properties.nodes[0];
    this.body.data.nodes.update({id: selectedNodeId, color: {background: 'red', border: 'black'}});
  }")
V2
```

## after 2035-05-25

```{r}
mc3_edges_filtered_dates_2 <- mc3_edges_select_high %>%
  filter(end_date > as_datetime("2035-05-25"))


# Visualize with visNetwork
V3 <- visNetwork(mc3_nodes_combined, mc3_edges_filtered_dates_2) %>%
  visPhysics(solver = "forceAtlas2Based",
             forceAtlas2Based = list(gravitationalConstant = -100)) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visGroups(groupname = "Organization", color = "lightblue") %>%
  visGroups(groupname = "Person", color = "lightgreen") %>%
  visLegend() %>%
  visEdges(arrows = "to") %>%
  visOptions(
    highlightNearest = list(enabled = TRUE, degree = 2, hover = TRUE),
    nodesIdSelection = TRUE,
    selectedBy = "subtype",
    collapse = TRUE
  ) %>%
  visInteraction(dragNodes = TRUE, dragView = TRUE, zoomView = TRUE) %>%
  visEvents(selectNode = "function(properties) {
    var selectedNodeId = properties.nodes[0];
    this.body.data.nodes.update({id: selectedNodeId, color: {background: 'red', border: 'black'}});
  }")
V3
```
:::

We can see from the visNetwork, some person control more than 30 companies at the same time, there will be an obvious control of illegal financial activities.

## 5.Conclusion

Exploring the networks between the various type of nodes or players in the space has been useful to visualising the relationships between the different parties. It has yielded interesting insights on how certain companies may influence the around companies.

For future work, the additional column of timeline and financial situation can be used to provide an additional layer of to the overall visualisation of networks and information in this project.
